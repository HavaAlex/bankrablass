using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace _2024_09_23_bankrablás
{
    internal class Program
    {
        static int korszam = 0;
        static public Random kaka = new Random();
        static public List<List<VarosElem>> t = new List<List<VarosElem>>();
        static public List<List<bool>> felfedezve = new List<List<bool>>();
        static public Seriff bela ;
        static public Random r = new Random();
        static public Talaj padlo = new Talaj();
        static public Whiskey peldaW = new Whiskey();
        static public List<VarosElem> haramiak = new List<VarosElem>();
        static int banditakszam = 4;
        static int aranyokszama = 5;


        static public int[][] directions = new int[][]
        {
            new int[] {-1, -1},
            new int[] {0, -1},
            new int[] {1, -1},

            new int[] {-1, 0},
            new int[] {1, 0},

            new int[] {-1, 1},
            new int[] {0, 1},
            new int[] {1, 1}
        };
        static void Main(string[] args)
        {

            palyafeltolt();
            
            megyajatek();
            Console.ReadKey();
        }
        static void megyajatek()
        {
            Console.Clear();
            korszam++;
            Console.WriteLine("Seriff életereje: " + bela.hp);
            Console.WriteLine("Seriff aranyrögei: " + bela.aranyrogokszama);
            Console.WriteLine("Banditák száma"+ haramiak.Count);
            Console.WriteLine("Aranyok száma: "+aranyokszama);
            Console.WriteLine(korszam + ". kör");
            for (int i = 0; i < 50; i++)
            {
                Console.ForegroundColor = ConsoleColor.DarkCyan;
                Console.Write("-");
                Console.ForegroundColor = ConsoleColor.White;
            }
            Console.WriteLine();
            for (int i = 0; i < haramiak.Count; i++)
            {
                Console.WriteLine(haramiak[i].hp + " " + i + " " + "élete " + haramiak[i].aranyrogokszama + "  aranyaa");
            }
            if (korszam % 3 == 0){
                for (int i = 0; i < haramiak.Count; i++)
                {
                    
                    if (haramiak[i].hp < 1)
                    {
                        Console.WriteLine("meghalik");
                        bela.aranyrogokszama += haramiak[i].aranyrogokszama;
                        t[haramiak[i].x][haramiak[i].y] = padlo;
                        haramiak.RemoveAt(i);
                        i--;

                    }
                    else
                    {
                        bMozog(haramiak[i].x, haramiak[i].y, haramiak[i], i);
                    }
                }
                haramiak.Clear();
                for (int i = 0; i < t.Count; i++)
                {
                    for (int j = 0; j < t[i].Count; j++)
                    {
                        if (t[i][j] is Bandit)
                        {
                            haramiak.Add(t[i][j]);
                        }
                    }
                }
            }
            

            //sMozog(bela.x, bela.y , bela);
            
            
            if (bela.hp < 1)
            {
                palyakiir();
                Console.WriteLine("Béla meghalt ;(");
                t[bela.x][bela.y] = padlo;
                palyakiir();
                return;
            }
            MoveSheriff();
            palyakiir();

            for (int i = 0; i < 50; i++)
            {
                Console.ForegroundColor = ConsoleColor.DarkCyan;
                Console.Write("-");
                Console.ForegroundColor = ConsoleColor.White;
            }
            Console.WriteLine(" nyomd");
            //Console.ReadKey();
            //Thread.Sleep(100);
            megyajatek();



        }
        static void felfedez(int x, int y)
        {
            felfedezve[x][y] = true;
            foreach (var dir in directions)
            {
                int newX = x + dir[0];
                int newY = y + dir[1];
                if (newX >= 0 && newX < t.Count && newY >= 0 && newY < t[0].Count)
                {
                    felfedezve[newX][newY] = true;
                }
            }
        }

        static void MoveSheriff()
        {
            foreach (var dir in directions)
            {
                int newX = bela.x + dir[0];
                int newY = bela.y + dir[1];
                if (newX >= 0 && newX < t.Count && newY >= 0 && newY < t[0].Count)
                {
                    if (t[newX][newY] is Bandit)
                    {

                        if (bela.hp > 50)//megkereseni ezt a banditát a tömbbe levenni ott a hp-jat és elvenni az aranát
                        {
                            for (int k = 0; k < haramiak.Count; k++)
                            {
                                if (haramiak[k].x == newX && haramiak[k].y == newY)
                                {
                                    haramiak[k].hp -= bela.sebzes;
                                }
                            }
                            return;
                        }
                    }
                }
            }
            // First priority: Go to discovered Whiskey if HP < 50
            if (bela.aranyrogokszama == 5 && GoToDiscovered<Varoshaza>())
            {
                Console.WriteLine("megyakijáratfele");
                return;
            }

            if (bela.hp < 50 && GoToDiscovered<Whiskey>())
            {
                Console.WriteLine("meggyőgyulni");
                return;
            }

            // Second priority: Go to discovered Aranyrog or Bandits
            if (GoToDiscovered<Aranyrog>())
            {
                Console.WriteLine("rászáll eegy aranyra");
                aranyokszama--;
                return;
            }
            if (bela.hp > 50 && GoToDiscovered<Bandit>())
            {
                Console.WriteLine("rászáll egy banditára");
                return;
            }
            // Third priority: Explore unknown tiles
            //Console.WriteLine("kalanda fel");
            ExploreUnknown();
            return;
            
        }
        // Function to move the sheriff toward discovered tiles of a specific type T (e.g. Whiskey, Aranyrog, Bandit)
        static bool GoToDiscovered<T>() where T : VarosElem
        {
            for (int i = 0; i < t.Count; i++) // Loop through all rows
            {
                for (int j = 0; j < t[i].Count; j++) // Loop through all columns in each row
                {
                    if (t[i][j] is T && felfedezve[i][j]) // If the tile is of type T and has been discovered
                    {
                        MoveTowardTarget(i, j); // Move toward this discovered target
                        return true;
                    }
                }
            }
            return false;
        }

        // Function to explore unknown tiles (i.e., those that are not discovered in the felfedezve list)
        static void ExploreUnknown()
        {
            for (int i = 0; i < t.Count; i++) // Loop through all rows
            {
                for (int j = 0; j < t[i].Count; j++) // Loop through all columns
                {
                    if (!felfedezve[i][j]) // If this tile is not discovered yet
                    {
                        MoveTowardTarget(i, j); // Move toward this unknown tile
                        return;
                    }
                }
            }
        }

        // Function to move the sheriff step-by-step toward the target tile (i, j)

        static void MoveTowardTarget(int targetX, int targetY)
        {
            List<(int, int)> path = FindPathAroundBarricades(bela.x, bela.y, targetX, targetY);

            // If a valid path is found, move the sheriff step-by-step along the path
            while (true)
            {
                if(path == null)
                {
                    path = FindPathAroundBarricades(bela.x, bela.y, targetX, targetY);
                }
                else
                {
                    break;
                }
            }
            if (path != null && path.Count > 0)
            {
                // Move one step toward the next tile in the path
                (int nextX, int nextY) = path[0];
                serrifLep(bela.x, bela.y, nextX, nextY);
            }
            
        }

        // BFS Pathfinding to navigate around barricades
        static List<(int, int)> FindPathAroundBarricades(int startX, int startY, int targetX, int targetY)
        {/*
            int rows = t.Count;
            int cols = t[0].Count;
            bool[,] visited = new bool[rows, cols]; // To keep track of visited tiles
            (int, int)[,] parent = new (int, int)[rows, cols]; // To reconstruct the path

            // Directions for moving up, down, left, right, and diagonal movements
            int[] dX = { -1, 1, 0, 0, -1, -1, 1, 1 };
            int[] dY = { 0, 0, -1, 1, -1, 1, -1, 1 };

            Queue<(int, int)> queue = new Queue<(int, int)>();
            queue.Enqueue((startX, startY));
            visited[startX, startY] = true;

            bool pathFound = false;

            while (queue.Count > 0)
            {
                (int x, int y) = queue.Dequeue();

                // If we reached the target, reconstruct the path
                if (x == targetX && y == targetY)
                {
                    pathFound = true;
                    return ReconstructPath(parent, startX, startY, targetX, targetY);
                }

                // Explore neighbors
                for (int i = 0; i < dX.Length; i++)
                {
                    int newX = x + dX[i];
                    int newY = y + dY[i];

                    // Check if the new position is within bounds and not visited
                    if (newX >= 0 && newX < rows && newY >= 0 && newY < cols && !visited[newX, newY])
                    {
                        // Check if it's not a barricade and can be moved into
                        if (!(t[newX][newY] is Barikad))
                        {
                            queue.Enqueue((newX, newY));
                            visited[newX, newY] = true;
                            parent[newX, newY] = (x, y); // Record the parent to reconstruct the path later

                            // Debug information
                            //Console.WriteLine($"Enqueued: ({newX}, {newY})");
                        }
                    }
                }
            }

            // If no path was found, fallback to a random move


            return null; // Return null if somehow we exit without finding a path*/





            Queue<(int x, int y)> queue = new Queue<(int x, int y)>();
            queue.Enqueue((startX, startY));

            Dictionary<(int, int), (int, int)> cameFrom = new Dictionary<(int, int), (int, int)>();

            HashSet<(int, int)> visited = new HashSet<(int, int)>{(startX, startY)};

            while (queue.Count > 0)
            {
                var current = queue.Dequeue();
                var (currentX, currentY) = current;


                if (currentX == targetX && currentY == targetY)
                    return ReconstructPath(cameFrom, (targetX, targetY));

                for (int i = 0; i < directions.GetLength(0); i++)
                {
                    int neighborX = currentX + directions[i][0];
                    int neighborY = currentY + directions[i][1];

                    if (neighborX >= 0 && neighborX < t.Count && neighborY >= 0 && neighborY < t[0].Count)
                    {
                        var neighbor = (neighborX, neighborY);
                        queue.Enqueue(neighbor);
                        visited.Add(neighbor);
                        cameFrom[neighbor] = (currentX, currentY);
                    }
                }
            }

            return null;
        }

        // Reconstructs the path from the target to the starting point using the parent array
        private static List<(int, int)> ReconstructPath(Dictionary<(int, int), (int, int)> cameFrom, (int x, int y) current)
        {
            var totalPath = new List<(int, int)> { current };
            while (cameFrom.ContainsKey(current))
            {
                current = cameFrom[current];
                totalPath.Insert(0, current);
            }
            totalPath.RemoveAt(0);
            return totalPath;
        }


        static void randombamegy(int x, int y)
        {

            int irany = r.Next(0, directions.Length);
            int newX = x + directions[irany][0];
            int newY = y + directions[irany][1];
            
            if (newX >= 0 && newX < t.Count && newY >= 0 && newY < t[0].Count) //nincskint
            {
                if (t[newX][newY] is Talaj)//talaj
                {
                    
                    serrifLep(x, y, newX, newY);
                    felfedez(newX, newY);
                    
                    return;
                    //Console.WriteLine(irany);
                }
                else
                {
                    randombamegy(x, y);
                }
                
            }
            else
            {
                
                //Thread.Sleep(50000);
                randombamegy(x, y);
            }
        }
        static void serrifLep(int x, int y, int newX, int newY)
        {

            if (t[newX][newY] is Aranyrog)
            {
                bela.aranyrogokszama++;
            }
            else if (t[newX][newY] is Whiskey)
            {
                if (bela.hp <50)
                {
                    bela.hp += 50;
                    wPut(r, 1);
                }
                else
                {
                    Console.WriteLine("kalanda fel");
                    randombamegy(x, y);
                }
               

            }
            else if (t[newX][newY] is Varoshaza)
            {
                if (bela.aranyrogokszama == 5)
                {
                    Console.WriteLine("jipiiiiii");
                    Console.ReadKey();
                }
                else
                {
                    Console.WriteLine("kalanda fel");
                    randombamegy(x, y);
                }
                
            }
            else if (t[newX][newY] is Bandit)
            {
                t[newX][newY].hp -= bela.sebzes;

            }
            t[newX][newY] = bela;
            t[x][y] = padlo;
            bela.x = newX;
            bela.y = newY;
            felfedez(newX, newY);
            
        }
        static void bMozog(int x, int y, VarosElem pl,int i) // b mint bandita
        {
            bool sikerultKezdeniMagaddalValamitTeSzerencsetlen = false;
            if(pl.hp< 1)
            {
                t[x][y] = padlo;
                bela.aranyrogokszama += pl.aranyrogokszama;
                //Console.WriteLine("meghalt egy bandita!");
            }
            foreach (var dir in directions)
            {
                int newX = x + dir[0];
                int newY = y + dir[1];
                if (newX >= 0 && newX < t.Count && newY >= 0 && newY < t[0].Count)
                {
                    if (t[newX][newY] is Aranyrog) // azonnal odamegy
                    {
                        pl.aranyrogokszama++;
                        haramiak[i].x = newX;
                        haramiak[i].y = newY;
                        pl.x = newX; 
                        pl.y = newY;
                        t[x][y] = padlo;
                        t[newX][newY] = pl;
                        sikerultKezdeniMagaddalValamitTeSzerencsetlen = true;
                        aranyokszama--;
                        return;
                    }
                    else if (t[newX][newY] is Seriff) //támadásba lendül esztelenül
                    {
                        //Console.WriteLine("SZEEEEEEEEX");
                        pl.utik(bela);
                        sikerultKezdeniMagaddalValamitTeSzerencsetlen = true;
                        return;
                        
                    }
                }
            }
            if (!sikerultKezdeniMagaddalValamitTeSzerencsetlen)
            {
                BombaNiztosRandomSzam(x, y, pl,i); // rekurzívos randomirányvalasztos varazslat
            }
            
        }
        static void BombaNiztosRandomSzam(int x, int y,VarosElem pl,int i)
        {
            int irany = r.Next(0, directions.Length);
            if (x + directions[irany][0] >= 0 && x + directions[irany][0] < t[0].Count && y + directions[irany][1] >= 0 && y + directions[irany][1] < t.Count)
            {
                if (t[x + directions[irany][0]][y + directions[irany][1]] is Talaj)
                {
                    haramiak[i].x = x + directions[irany][0];
                    haramiak[i].y = y + directions[irany][1];
                    pl.x = x + directions[irany][0];
                    pl.y = y + directions[irany][1];
                    t[x + directions[irany][0]][y + directions[irany][1]] = pl;
                    t[x][y] = padlo;
                    //Console.WriteLine(irany);
                }
            }
            else
            {
                BombaNiztosRandomSzam(x, y, pl, i);
            }
            
        }
        static void palyafeltolt()
        {
            for (int i = 0; i < 25; i++) // feltöltés üresre
            {
                List<VarosElem> list = new List<VarosElem>();
                List<bool> sl = new List<bool>();
                for (int j = 0; j < 25; j++) 
                { 
                    list.Add(padlo);
                    bool pl = false; // seriff látómező cucc
                    sl.Add(pl);
                }
                t.Add(list);// üres de lagalább nem absztrakt
                felfedezve.Add(sl);// seriff látómező cucc
            }
            
            int barikadszam = (t.Count * t[0].Count)/6;
            xPut(barikadszam, r);
            bPut(r,banditakszam);
            aPut(r,aranyokszama);
            sPut(r);
            wPut(r,1);
            vPut();
        }
        static void vPut()
        {
            int x = r.Next(0, t.Count);
            int y = r.Next(0, t[0].Count);

            if (t[x][y] is Talaj)
            {
                Varoshaza pl = new Varoshaza();
                t[x][y] = pl;
            }
            else
            {
                vPut();
            }
        }
        static void wPut(Random r, int wNumber) 
        {
            int x = r.Next(0, t.Count);
            int y = r.Next(0, t[0].Count);
            if (wNumber == 0)
            {
                return;
            }
            else if(wNumber > 0)
            {
                if (t[x][y] is Talaj)
                {
                    Whiskey whiskey = new Whiskey();
                    t[x][y] = whiskey;
                    wPut(r, wNumber-1);
                }
                else
                {
                    wPut(r, wNumber); 
                }
            }

        }
        static void sPut(Random r)
        {
            int x = r.Next(0, t.Count);
            int y = r.Next(0, t[0].Count);

            if (t[x][y] is Talaj)
            {
                bela = new Seriff(100, kaka.Next(20, 36), 0,x,y);
                t[x][y] = bela;
            }
            else
            {
                sPut(r);
            }
        }
        static void aPut(Random r, int aNumber)
        {
            int x = r.Next(0, t.Count);
            int y = r.Next(0, t[0].Count);
            if (aNumber <= 0)
            {
                return;
            }
            else if (t[x][y] is Talaj)
            {
                Aranyrog krajcar = new Aranyrog();
                t[x][y] = krajcar;
                aPut(r, aNumber - 1);
            }
            else
            {
                aPut(r, aNumber);
            }
        }
        static void bPut(Random r, int bNumber) 
        {
            int x = r.Next(0, t.Count);
            int y = r.Next(0, t[0].Count);
            if (bNumber <= 0)
            {
                return;
            }
            else if (t[x][y] is Talaj)
            {
                Bandit joska = new Bandit(100, 0, x,y);
                haramiak.Add(joska);
                t[x][y] = joska;
                bPut(r, bNumber - 1);
            }
            else
            {
                bPut(r, bNumber );
            }
        }
        static void xPut(int barikadszam,Random r)
        {
            int x = r.Next(0, t.Count);
            int y = r.Next(0, t[0].Count);
            //Console.WriteLine("újehly: "+x + " " + y);//segícség
            if (barikadszam <= 0)
            {
                return;
            }
            else if (t[x][y] is Talaj && korbecheck(x,y))
            {
                
                Barikad barikad = new Barikad();
                t[x][y] = barikad;
                xPut(barikadszam-1,r);
                
            }
            else
            {
                xPut(barikadszam, r);
            }
        }
        static void palyakiir()
        {
            
            for (int i = 0; i < t.Count; i++) 
            { 
                for(int j = 0;j < t[i].Count; j++) 
                {
                    /*if (felfedezve[i][j])
                    {*/
                        if (t[i][j] is Barikad)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkRed;
                            Console.Write(t[i][j].ToString() + " ");
                            Console.ForegroundColor = ConsoleColor.White;
                        }
                        else if (t[i][j] is Bandit)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkBlue;
                            Console.Write(t[i][j].ToString() + " ");
                            Console.ForegroundColor = ConsoleColor.White;
                        }
                        else if (t[i][j] is Aranyrog)
                        {
                            Console.ForegroundColor = ConsoleColor.Yellow;
                            Console.Write(t[i][j].ToString() + " ");
                            Console.ForegroundColor = ConsoleColor.White;
                        }
                        else if (t[i][j] is Seriff)
                        {
                            Console.BackgroundColor = ConsoleColor.DarkGray;
                            Console.Write(t[i][j].ToString() + " ");
                            Console.BackgroundColor = ConsoleColor.Black;
                        }
                        else if (t[i][j] is Whiskey)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkYellow;
                            Console.Write(t[i][j].ToString() + " ");
                            Console.ForegroundColor = ConsoleColor.White;
                        }
                        else if (t[i][j] is Varoshaza)
                        {
                            Console.ForegroundColor = ConsoleColor.Magenta;
                            Console.Write(t[i][j].ToString() + " ");
                            Console.ForegroundColor = ConsoleColor.White;
                        }
                        else
                        {
                            Console.BackgroundColor = ConsoleColor.DarkGreen;
                            Console.Write(t[i][j].ToString() + " ");
                            Console.BackgroundColor = ConsoleColor.Black;
                        }
                    /*}
                    else
                    {
                        //Console.BackgroundColor = ConsoleColor.Green;
                        Console.Write("  ");
                        //Console.BackgroundColor = ConsoleColor.Black;
                    }*/
                }
                Console.Write(" ");
                Console.WriteLine();
            }
        }
        static bool korbecheck(int x, int y)
        {

            int szomszedszam = 0;
            foreach (var dir in directions)
            {
                int newX = x + dir[0];
                int newY = y + dir[1];
                if (newX >= 0 && newX < t.Count && newY >= 0 && newY < t[0].Count)
                {
                    if (t[newX][newY] is Barikad)
                    {
                        //Console.WriteLine(newX +" "+ newY+"  barikád xd");//segícség
                        szomszedszam++;
                    }

                }
            }
            //Console.WriteLine("szomszádok szama  "+ szomszedszam);//segícség

            if (szomszedszam != 0)
            {
                // Console.WriteLine("nemjóóó"); //segícség
                return false;
            }
            else
            {
               // Console.WriteLine("tökjóóó");//segícség
                return true;
            }
        }
    }
}
